
" Normal settings
    set mouse=a
    " 显示行号
    set number
    " 显示标尺
    set ruler
    " 历史纪录
    set history=1000
    " 输入的命令显示出来，看的清楚些
    set foldmethod=indent
    set showcmd
    " 状态行显示的内容
    set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}
    " 启动显示状态行1，总是显示状态行2
    set laststatus=2
    " 语法高亮显示
    syntax on
    set fileencodings=utf-8,gb2312,gbk,cp936,latin-1
    set fileencoding=utf-8
    set termencoding=utf-8
    set fileformat=unix
    set encoding=utf-8
    " 配色方案
    colorscheme desert
    " 指定配色方案是256色
    set t_Co=256

    set wildmenu

    " 去掉有关vi一致性模式，避免以前版本的一些bug和局限，解决backspace不能使用的问题
    set nocompatible
    set backspace=indent,eol,start
    set backspace=2

    " 启用自动对齐功能，把上一行的对齐格式应用到下一行
    set autoindent

    " 依据上面的格式，智能的选择对齐方式，对于类似C语言编写很有用处
    set smartindent

    " vim禁用自动备份
    set nobackup
    set nowritebackup
    set noswapfile

    " 用空格代替tab
    set expandtab

    " 设置显示制表符的空格字符个数,改进tab缩进值，默认为8，现改为4
    set tabstop=4

    " 统一缩进为4，方便在开启了et后使用退格(backspace)键，每次退格将删除X个空格
    set softtabstop=4

    " 设定自动缩进为4个字符，程序中自动缩进所使用的空白长度
    set shiftwidth=4

    " 设置帮助文件为中文(需要安装vimcdoc文档)
    set helplang=cn

    " 显示匹配的括号
    set showmatch

    " 文件缩进及tab个数
    au FileType html,python,vim,javascript setl shiftwidth=4
    au FileType html,python,vim,javascript setl tabstop=4
    au FileType java,php setl shiftwidth=4
    au FileType java,php setl tabstop=4
    " 高亮搜索的字符串
    set hlsearch

    " 检测文件的类型
    filetype on
    filetype plugin on
    filetype indent on

    " C风格缩进
    set cindent
    set completeopt=longest,menu

    " 功能设置

    " 去掉输入错误提示声音
    set noeb
    " 自动保存
    set autowrite
    " 突出显示当前行 
    set cursorline
    " 突出显示当前列
    " set cursorcolumn
    "设置光标样式为竖线vertical bar
    " Change cursor shape between insert and normal mode in iTerm2.app
    "if $TERM_PROGRAM =~ "iTerm"
    let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
    let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
    "endif
    " 共享剪贴板
    set clipboard+=unnamed
    " 文件被改动时自动载入
    set autoread
    " 顶部底部保持3行距离
    set scrolloff=3
    set nocompatible
    filetype off

"plugins
    set rtp+=~/.vim/bundle/Vundle.vim
    set rtp+=/usr/local/opt/fzf
    set rtp+=~/.fzf
    call vundle#begin()

    Plugin 'gmarik/Vundle.vim'
    "代码补全
    Plugin 'Valloric/YouCompleteMe'
    "显示信息+美观
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    
    "文件快速搜索
    Plugin 'junegunn/fzf.vim'
        "How to use :Files PathName
    "vim内运行bash
    Plugin 'skywind3000/asyncrun.vim'
        "How to use ::AsyncRun[!] [options] {cmd} ...
    "括号引号匹配
    Plugin 'Raimondi/delimitMate'
    "缩进标线
    Plugin 'Yggdroot/indentLine'
    "代码对齐
    Plugin 'godlygeek/tabular'
    "代码提纲
    Plugin 'majutsushi/tagbar'
    "代码格式化
    Plugin 'Chiel92/vim-autoformat'
    "Fast comment 
    Plugin 'scrooloose/nerdcommenter'
    "smooth scroll 
    Plugin 'terryma/vim-smooth-scroll'
    "Exand select region in the Visual mode 
    Plugin 'terryma/vim-expand-region'
    "Quick jump 
    Plugin 'haya14busa/incsearch.vim'
    "Markdown preview 
    Plugin 'iamcco/markdown-preview.nvim'
    call vundle#end()
    filetype plugin indent on

" config of YCM
    " 自动补全配置
    set completeopt=menu,menuone
    let g:ycm_add_preview_to_completeopt = 0
    autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
    inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>" "回车即选中当前项
    "上下左右键的行为 会显示其他信息
    inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
    inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
    inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
    inoremap <expr> <PageUp> pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

    "youcompleteme 默认tab s-tab 和自动补全冲突
    "let g:ycm_key_list_select_completion=['<c-n>']
    let g:ycm_key_list_select_completion = ['<Down>']
    "let g:ycm_key_list_previous_completion=['<c-p>']
    let g:ycm_key_list_previous_completion = ['<Up>']
    let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示

    let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎
    let g:ycm_min_num_of_chars_for_completion=2 " 从第2个键入字符就开始罗列匹配项
    let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项
    let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全
    nnoremap <F5> :YcmForceCompileAndDiagnostics<CR> "force recomile with syntastic
    "nnoremap <leader>lo :lopen<CR> "open locationlist
    "nnoremap <leader>lc :lclose<CR> "close locationlist
    inoremap <leader><leader> <C-x><C-o>
    "在注释输入中也能补全
    let g:ycm_complete_in_comments = 1
    "在字符串输入中也能补全
    let g:ycm_complete_in_strings = 1
    "注释和字符串中的文字也会被收入补全
    let g:ycm_collect_identifiers_from_comments_and_strings = 0
    let g:ycm_key_invoke_completion = '<c-z>'
    nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR> 
    let g:ycm_semantic_triggers =  {
      \   'c' : ['->', '.'],
      \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
      \             're!\[.*\]\s'],
      \   'ocaml' : ['.', '#'],
      \   'cpp,objcpp' : ['->', '.', '::'],
      \   'perl' : ['->'],
      \   'php' : ['->', '::'],
      \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
      \   'ruby' : ['.', '::'],
      \   'lua' : ['.', ':'],
      \   'erlang' : [':'],
      \ }
    let g:ycm_semantic_triggers =  {
                \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
                \ 'cs,lua,javascript': ['re!\w{2}'],
                \ }

"Config for Airline

    "这个是安装字体后 必须设置此项" 
    let g:airline_powerline_fonts = 1   

     "打开tabline功能,方便查看Buffer和切换,省去了minibufexpl插件
     let g:airline#extensions#tabline#enabled = 1
     let g:airline#extensions#tabline#buffer_nr_show = 1

    "设置切换Buffer快捷键"
     nnoremap <F3> :bn<CR>
     nnoremap <F2> :bp<CR>
     " 关闭状态显示空白符号计数
     let g:airline#extensions#whitespace#enabled = 0
     let g:airline#extensions#whitespace#symbol = '!'
     " 设置consolas字体"前面已经设置过
     "set guifont=Consolas\ for\ Powerline\ FixedD:h11
      if !exists('g:airline_symbols')
        let g:airline_symbols = {}
      endif
      " old vim-powerline symbols
      let g:airline_left_sep = '⮀'
      let g:airline_left_alt_sep = '⮁'
      let g:airline_right_sep = '⮂'
      let g:airline_right_alt_sep = '⮃'
      let g:airline_symbols.branch = '⭠'
      let g:airline_symbols.readonly = '⭤'

"Quick Run By F5
    map <F5> :call CompileRunGcc()<CR>

    func! CompileRunGcc()
        exec "w" 
        if &filetype == 'c' 
            exec '!g++ % -o %<'
            exec '!time ./%<'
        elseif &filetype == 'cpp'
            exec '!g++ % -o %< -D _DEBUG'
            exec '!time ./%<'
        elseif &filetype == 'python'
            exec '!time python %'
        elseif &filetype == 'sh'
            :!time bash %
        endif                                                                              
    endfunc 

"Config indentLine
    let g:indentLine_noConcealCursor = 1
    let g:indentLine_color_term = 0
    let g:indentLine_char = '|'
    let g:indentLine_color_term = 239

"Config for tagbar by <F8> 
nmap <F8> :TagbarToggle<CR>

"Config for vim-autoformat by <F4>
noremap <F4> :Autoformat<CR>
let g:formatdef_harttle = '"astyle --style=attach --pad-oper"'
let g:formatters_cpp = ['harttle']
let g:formatters_java = ['harttle']

"Config for NERD Commenter

    " Add spaces after comment delimiters by default
    let g:NERDSpaceDelims = 1

    " Use compact syntax for prettified multi-line comments
    let g:NERDCompactSexyComs = 1

    " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDDefaultAlign = 'left'

    " Set a language to use its alternate delimiters by default
    let g:NERDAltDelims_java = 1

    " Add your own custom formats or override the defaults
    let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

    " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDCommentEmptyLines = 1

    " Enable trimming of trailing whitespace when uncommenting
    let g:NERDTrimTrailingWhitespace = 1

    " Enable NERDCommenterToggle to check all selected lines is commented or not 
    let g:NERDToggleCheckAllLines = 1
    "Usage
    "\cc: comment the currentline
    "\cn: same as cc but force nesting 
    "\cu: uncomment 
    
" Find and replace:
    " Vim origin: :<range>s/<string you want to find>/<string you want to replace>

"Config of vim-smooth-scroll
    "Vim default: <c-f> down and <c-b> up
    noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 0, 2)<CR>
    noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 0, 2)<CR>
    noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 0, 4)<CR>
    noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 0, 4)<CR>

"Config of vim-expand-region By using J K(uppercase to select)
    map K <Plug>(expand_region_expand)
    map J <Plug>(expand_region_shrink)

"Config of incsearch
    " Basic usage: 
    " map /  <Plug>(incsearch-forward)
    " map ?  <Plug>(incsearch-backward)
    " map g/ <Plug>(incsearch-stay)
    " <c-j> scroll while searching
    " N jump to next 
    " n jump to prev

" 代码折叠
    " 操作：za，打开或关闭当前折叠；zM，关闭所有折叠；zR，打开所有折叠
    " indent方式，vim会自动利用缩进进行折叠，我们可以使用现成的折叠成果．
    " 我们可以在(括号)折叠处输入以下命令：
    "
    " zc 折叠
    " zC 对所在范围内所有嵌套的折叠点进行折叠
    " zo 展开折叠
    " zO 对所在范围内所有嵌套的折叠点展开
    " [z 到当前打开的折叠的开始处。
    " ]z 到当前打开的折叠的末尾处。
    " zj 向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。
    " zk 向上移动到前一折叠的结束处。关闭的折叠也被计入。

" Config of markdown preview 
    noremap <F6> :MarkdownPreview <CR>
    " set to 1, nvim will open the preview window after entering the markdown buffer
    " default: 0
    let g:mkdp_auto_start = 0

    " set to 1, the nvim will auto close current preview window when change
    " from markdown buffer to another buffer
    " default: 1
    let g:mkdp_auto_close = 1

    " set to 1, the vim will refresh markdown when save the buffer or
    " leave from insert mode, default 0 is auto refresh markdown as you edit or
    " move the cursor
    " default: 0
    let g:mkdp_refresh_slow = 1

    " set to 1, the MarkdownPreview command can be use for all files,
    " by default it can be use in markdown file
    " default: 0
    let g:mkdp_command_for_global = 0

    " set to 1, preview server available to others in your network
    " by default, the server listens on localhost (127.0.0.1)
    " default: 0
    let g:mkdp_open_to_the_world = 0

    " use custom IP to open preview page
    " useful when you work in remote vim and preview on local browser
    " more detail see: https://github.com/iamcco/markdown-preview.nvim/pull/9
    " default empty
    let g:mkdp_open_ip = ''

    " specify browser to open preview page
    " default: ''
    let g:mkdp_browser = ''

    " set to 1, echo preview page url in command line when open preview page
    " default is 0
    let g:mkdp_echo_preview_url = 0

    " a custom vim function name to open preview page
    " this function will receive url as param
    " default is empty
    let g:mkdp_browserfunc = ''

    " options for markdown render
    " mkit: markdown-it options for render
    " katex: katex options for math
    " uml: markdown-it-plantuml options
    " maid: mermaid options
    " disable_sync_scroll: if disable sync scroll, default 0
    " sync_scroll_type: 'middle', 'top' or 'relative', default value is 'middle'
    "   middle: mean the cursor position alway show at the middle of the preview page
    "   top: mean the vim top viewport alway show at the top of the preview page
    "   relative: mean the cursor position alway show at the relative positon of the preview page
    " hide_yaml_meta: if hide yaml metadata, default is 1
    let g:mkdp_preview_options = {
        \ 'mkit': {},
        \ 'katex': {},
        \ 'uml': {},
        \ 'maid': {},
        \ 'disable_sync_scroll': 0,
        \ 'sync_scroll_type': 'middle',
        \ 'hide_yaml_meta': 1
        \ }

    " use a custom markdown style must be absolute path
    let g:mkdp_markdown_css = ''

    " use a custom highlight style must absolute path
    let g:mkdp_highlight_css = ''

    " use a custom port to start server or random for empty
    let g:mkdp_port = ''

    " preview page title
    " ${name} will be replace with the file name
    let g:mkdp_page_title = '「${name}」'

"Config of fzf 
    nmap <F7> :Files ./ <CR>
