The way to compile the program and some details about the program:

1. I have submitted 3 versions of PFIFO in this assignment, here is difference of them

    (1) The first version 55199998_boolean.cpp use a semaphore and a boolean variable to achieve the synchronization:
        
        In this version, server will not blocked after the activating the pflow thread, 
        i.e. although it cannot activate it twice after empty the queue, it can still 
        continue to run the code of the server.

        The semaphore empty is set to be zero at first, pflow will block on it, the boolean 
        variable pflow_running is set to be false at first. When the server empty the queue, 
        and current sequence number is not zero and boolean value is false, it will post the 
        semaphore empty and set pflow_running to be true.

        As long as the pflow thread is stopped, it will set the boolean value to be false. 
        The semaphore empty is protected by the boolean value, because the server will post
        empty only when the boolean value is false, and the boolean value is set to be false
        only when the pflow is finished
            
    
    (2) The second version 55199998_two_semaphore.cpp use two semaphores to achieve the synchronization:

        In this version, server will be blocked immediately after activating the pflow, and
        activated by the pflow after pflow finishing the refilling. 

        The semaphore empty and server_permission is set to be zero at first. when the server empty
        the queue, it will post the semaphore empty and release the mutex. After than, it will blocked
        on the semaphore server_permission whose value is set to be zero first. Once the pflow finished,
        it will activate the server.

    (3) The third version 55199998_multiserver.cpp use two semaphores to achieve the synchronization:

        If we consider the case that there are multiple server(although in this assignment, there is only one), 
        if we need to block all the server before the pflow is finished. We need to use the same trick in the
        vendor&seller problem taught in the tutorial.

        Now the semaphore empty is also set to be zero at first, but the semaphore server_permission is set
        to be one, and a boolean value refilling is set to be false at first. The implementation is very similar
        to the vendor problem. 

2. About the pflow problem mentioned in the remark 1

        I have several lines of codes to solve this problem, if you want to see the result of these lines of code, 
        please compile the program by 

        g++ 55199998_ONE_OF_THE_VERSIONS.cpp -o PFIFO -lpthread -D AVOID


3. The queue structure is defined in the header file "Queue.h", please make sure that "Queue.h" is in the same folder with "55199998.cpp"

4. To compile the program, use the following command line is enough (PFIFO can be changed to any name you like)

        g++ 55199998.cpp -o PFIFO -lpthread
